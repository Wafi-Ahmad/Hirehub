@startuml HireHub Backend Class Diagram

' Abstract Base Classes
abstract class AbstractBaseUser {
    + email: EmailField
    + is_active: BooleanField
    + is_staff: BooleanField
}

' User Management
class UserManager {
    + create_user(email, password, **extra_fields)
    + create_superuser(email, password, **extra_fields)
}

class User {
    ' Base Fields
    + email: EmailField
    + first_name: CharField
    + last_name: CharField
    + user_type: CharField
    + profile_picture: ImageField
    + cover_picture: ImageField
    + headline: CharField
    + bio: TextField
    + skills: TextField
    + experience: TextField
    + education: TextField
    + company_fields: JSON
    + location: CharField
    + website: URLField
    + social_links: JSON
    + privacy_settings: JSON
}

class Post {
    + user: ForeignKey(User)
    + content: TextField
    + media_type: CharField
    + image: ImageField
    + video: FileField
    + created_at: DateTimeField
    + updated_at: DateTimeField
    + likes: ManyToManyField(User)
    + comments_count: PositiveIntegerField
    + likes_count: PositiveIntegerField
    + is_active: BooleanField
    + is_hidden: BooleanField
    + update_counts()
    + add_like(user)
    + remove_like(user)
}

class Comment {
    + post: ForeignKey(Post)
    + user: ForeignKey(User)
    + content: TextField
    + parent_comment: ForeignKey(Comment)
    + created_at: DateTimeField
    + updated_at: DateTimeField
    + likes: ManyToManyField(User)
    + replies_count: PositiveIntegerField
    + likes_count: PositiveIntegerField
    + update_counts()
    + add_like(user)
    + remove_like(user)
}

class JobPost {
    + title: CharField
    + description: TextField
    + required_skills: CharField
    + experience_level: CharField
    + employment_type: CharField
    + location_type: CharField
    + location: CharField
    + salary_range: JSON
    + status: CharField
    + created_at: DateTimeField
    + expires_at: DateTimeField
    + company: ForeignKey(User)
    + applicants: ManyToManyField(User)
    + is_active: BooleanField
}

class Quiz {
    + job: OneToOneField(JobPost)
    + questions: JSONField
    + passing_score: IntegerField
    + is_active: BooleanField
    + created_at: DateTimeField
    + updated_at: DateTimeField
}

class QuizAttempt {
    + quiz: ForeignKey(Quiz)
    + user: ForeignKey(User)
    + answers: JSONField
    + score: IntegerField
    + passed: BooleanField
    + started_at: DateTimeField
    + completed_at: DateTimeField
}

class Notification {
    + recipient: ForeignKey(User)
    + sender: ForeignKey(User)
    + notification_type: CharField
    + content: TextField
    + created_at: DateTimeField
    + is_read: BooleanField
    + related_object_type: CharField
    + related_object_id: IntegerField
    + status: CharField
}

class JobApplication {
    + job: ForeignKey(JobPost)
    + applicant: ForeignKey(User)
    + status: CharField
    + applied_at: DateTimeField
    + cover_letter: TextField
    + resume: FileField
    + quiz_score: FloatField
}

' Relationships
AbstractBaseUser <|-- User
User "1" *-- "0..*" Post : creates
User "1" *-- "0..*" Comment : writes
User "1" *-- "0..*" JobPost : posts
User "1" *-- "0..*" JobApplication : submits
User "1" *-- "0..*" QuizAttempt : takes
Post "1" *-- "0..*" Comment : has
JobPost "1" *-- "1" Quiz : has
Quiz "1" *-- "0..*" QuizAttempt : tracks
User "1" *-- "0..*" Notification : receives
User "*" -- "*" Post : likes
User "*" -- "*" Comment : likes
UserManager "1" -- "1" User : manages

note right of User
  Supports both normal users
  and company accounts
end note

note right of JobPost
  Includes AI-powered
  matching functionality
end note

note right of Quiz
  Supports automated
  skill assessment
end note

@enduml