# Generated by Django 5.1.3 on 2024-12-22 01:04

import django.contrib.postgres.indexes
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('first_name', models.CharField(blank=True, max_length=30, null=True)),
                ('last_name', models.CharField(blank=True, max_length=30, null=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('company_name', models.CharField(blank=True, max_length=100, null=True)),
                ('user_type', models.CharField(choices=[('Normal', 'Normal User'), ('Company', 'Company User')], default='Normal', max_length=7)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profiles/avatars/')),
                ('cover_picture', models.ImageField(blank=True, null=True, upload_to='profiles/covers/')),
                ('bio', models.TextField(blank=True, null=True)),
                ('location', models.CharField(blank=True, max_length=100, null=True)),
                ('website', models.URLField(blank=True, null=True)),
                ('headline', models.CharField(blank=True, max_length=100, null=True)),
                ('preferred_job_category', models.CharField(blank=True, max_length=255, null=True)),
                ('preferred_job_type', models.CharField(choices=[('On-site', 'On-site'), ('Remote', 'Remote')], default='On-site', max_length=10)),
                ('desired_salary_range', models.CharField(blank=True, max_length=50, null=True)),
                ('preferred_location', models.CharField(blank=True, max_length=100, null=True)),
                ('skills', models.TextField(blank=True, null=True)),
                ('experience', models.TextField(blank=True, null=True)),
                ('education', models.TextField(blank=True, null=True)),
                ('certifications', models.TextField(blank=True, null=True)),
                ('recent_work', models.TextField(blank=True, null=True)),
                ('current_work', models.TextField(blank=True, null=True)),
                ('contact_details', models.TextField(blank=True, null=True)),
                ('phone', models.CharField(blank=True, max_length=20, null=True)),
                ('linkedin_url', models.URLField(blank=True, null=True)),
                ('github_url', models.URLField(blank=True, null=True)),
                ('is_profile_public', models.BooleanField(default=True)),
                ('show_email', models.BooleanField(default=True)),
                ('show_phone', models.BooleanField(default=False)),
                ('show_skills', models.BooleanField(default=True)),
                ('show_experience', models.BooleanField(default=True)),
                ('show_education', models.BooleanField(default=True)),
                ('show_certifications', models.BooleanField(default=True)),
                ('show_recent_work', models.BooleanField(default=True)),
                ('show_current_work', models.BooleanField(default=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('profile_embedding', models.TextField(blank=True, help_text='Vector embedding of user profile for similarity matching (stored as JSON string)', null=True)),
                ('embedding_updated_at', models.DateTimeField(blank=True, help_text='When the profile embedding was last updated', null=True)),
                ('following', models.ManyToManyField(blank=True, related_name='followers', to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('media_type', models.CharField(choices=[('image', 'Image'), ('video', 'Video'), ('both', 'Both'), ('none', 'None')], default='none', max_length=5)),
                ('image', models.ImageField(blank=True, null=True, upload_to='post_images/%Y/%m/%d/')),
                ('video', models.FileField(blank=True, null=True, upload_to='post_videos/%Y/%m/%d/')),
                ('comments_count', models.PositiveIntegerField(default=0)),
                ('likes_count', models.PositiveIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('is_hidden', models.BooleanField(default=False)),
                ('likes', models.ManyToManyField(blank=True, related_name='liked_posts', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('replies_count', models.PositiveIntegerField(default=0)),
                ('likes_count', models.PositiveIntegerField(default=0)),
                ('likes', models.ManyToManyField(blank=True, related_name='liked_comments', to=settings.AUTH_USER_MODEL)),
                ('parent_comment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='recruitmentAPI.comment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to=settings.AUTH_USER_MODEL)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='recruitmentAPI.post')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('HR', 'HR'), ('CEO', 'CEO')], max_length=3)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='role', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ConnectionRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('ACCEPTED', 'Accepted'), ('REJECTED', 'Rejected'), ('IGNORED', 'Ignored')], default='PENDING', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_requests', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_requests', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('sender', 'receiver')},
            },
        ),
        migrations.AddIndex(
            model_name='post',
            index=django.contrib.postgres.indexes.BTreeIndex(fields=['-created_at'], name='recruitment_created_064d48_btree'),
        ),
        migrations.AddIndex(
            model_name='post',
            index=models.Index(fields=['user', '-created_at'], name='recruitment_user_id_0ba3e9_idx'),
        ),
        migrations.AddIndex(
            model_name='post',
            index=models.Index(fields=['is_active', 'is_hidden', '-created_at'], name='recruitment_is_acti_c82953_idx'),
        ),
        migrations.AddIndex(
            model_name='comment',
            index=models.Index(fields=['-created_at'], name='recruitment_created_f0b813_idx'),
        ),
        migrations.AddIndex(
            model_name='comment',
            index=models.Index(fields=['post', 'parent_comment'], name='recruitment_post_id_587003_idx'),
        ),
    ]
